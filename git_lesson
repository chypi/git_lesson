#####		git essentials course from Daniel Chen

commands:

#####		CONFIGURATION

git init
git status

git config --list

git config --global user.name "name"
git config --global user.email "email address"

#####		COMMITTING

git add		# stagging
git add .	# add everything
git add file_name	# add file named "file_name"
git commit [-m]	# committing -m for one ligne message, if -m ommitted editor in "git config core.editor" is launched
git status	# checking the files status of the repo
git log [-oneline]	# checking what have been done

#####		GIT DIFF

git dif 		# see differences before staging 
git diff --staged	# see differences after staging & before committing
git diff HEAD~1		# see differences between the current version (HEAD) and one (~1) back
git diff af30f4e	# see differences between the current version and the numbered version found by "git log"

#####		GIT CHECKOUT:

git checkout		# revert back to a different stage
git checkout HEAD~1	# revert back one stage back
git checkout HEAD file_name	# revert back file "file_name"  one stage back
git checkout af30f4e	# without a file name (have a try to read the git alert message)
# "git checkout master" to quitt the "detached header" mode 
# git checkout has to be staged & committed in order to be effective
git chechout master file_name	# revert the file "file_name" to the last committed state (i.e. if a file has been deleted)
git checkout HEAD~1 file_name	# revert the file to the previous state (add & commit have to be done)

#####		GIT RESET:

git reset --hard	# panic button: reset back the repo to the last committed state (before staging)
git reset HEAD file_name	# reset back the file "file_name" to the last committed state (after staging, so, repo has to be staged)
git reset afe30f4e file_name	# reset back the file 'file_name" to the afe30f4e committed state (after staging, so, repo has to be staged)

#####		.GITIGNORE

# to track empty folders, add a .girkeep file in it
# if files have to be ignored (not tracked), place a .gitignore file in the repo's root folder.
# patterns can be used in .gitignore file in place of file name
git add -f file_name	# force to track file_name despite of .gitignore file rules

#####		REMOTE

git remote add origin https://github.com/chypi/git_lesson.git	# define the remote "origin" url (https)
git remote set-url origin git@github.com:chypi/git_lesson.git	# define/change the remote "origin" url (ssh)
git push origin master		# push <where> <what> : to <remote "origin"> <local "master">
git remote -v	# list the "fetch" and "push" urls








